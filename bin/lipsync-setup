#!/bin/bash
# ask the questions
lipsync-questions(){
  echo -n "> SERVER: IP or domainname: "
  read remote_server

  echo -n "> SERVER: SSH port: "
  read port
  
  echo -n "> SERVER/CLIENT: username (must exist on both): "
      read username

  echo -n "> SERVER: remote directory to be synced: "
  read lipsync_dir_remote

  echo -n "> CLIENT: directory to be synced: "
  read lipsync_dir_local

  echo -n "> CLIENT: ssh config file[${HOME}/.ssh/config]: "
  read lipsync_ssh_config
  if [[ -z ${lipsync_ssh_config} ]]
  then
    lipsync_ssh_config="${HOME}/.ssh/config"
  fi

  echo -n "> CLIENT: ssh key file[${HOME}/.ssh/id_dsa_lipsync]: "
  read lipsync_ssh_key
  if [[ -z ${lipsync_ssh_key} ]]
  then
    lipsync_ssh_key="${HOME}/.ssh/id_dsa_lipsync"
  fi

}

# check rsync pre-req local and remote
lipsync-prereq-rsync(){
  type -P rsync &>/dev/null || { echo; echo "  ERROR: lipsync requires rsync but it's not installed" >&2; exit 1; }
  RSYNC_VERS=$(rsync --version | grep '^rsync *version' | tr -s ' ' | cut -f 3 -d ' ')
  RSYNC_MAJOR=${RSYNC_VERS%%.*}
  RSYNC_VERS_REMOTE=$(ssh -p ${port} ${username}@${remote_server} rsync --version 2>/dev/null | grep '^rsync *version' | tr -s ' ' | cut -f 3 -d ' ')
  RSYNC_MAJOR_REMOTE=${RSYNC_VERS_REMOTE%%.*}
  if [[ ${RSYNC_MAJOR} -lt 3 ]];
  then
    echo; echo " ERROR: lipsync requires rsync > 3.0.0 but it's version ${RSYNC_VERS}" >&2;
    exit 1
  else
    return
  fi
  if [[ ${RSYNC_MAJOR_REMOTE} -lt 3 ]];
  then
    echo; echo " ERROR: lipsync requires the remote server rsync to be > 3.0.0 but it's version ${RSYNC_VERS_REMOTE}" >&2;
    exit 1
  else
    return
  fi
}

lipsync-prereqs(){
  ########################################
  # Check for required software
  ########################################
  echo -n "* Checking for required software..."
  type -P ssh &>/dev/null || { echo; echo "  ERROR: lipsync requires ssh-client but it's not installed" >&2; exit 1; }
  type -P ssh-copy-id &>/dev/null || { echo; echo "  ERROR: lipsync requires ssh-copy-id but it's not installed" >&2; exit 1; }
  type -P lsyncd &>/dev/null || { echo; echo "  ERROR: lipsync requires lsyncd but it's not installed" >&2; exit 1; }
  echo " OK"
}

lipsync-build-conf(){
  echo -n "* Creating lipsyncd config..."
  if [[ ! -d ${HOME}/.lipsyncd/ ]]
  then
    mkdir ${HOME}/.lipsyncd/
  fi
  # TODO copy from system-wide /etc/lipsyncdrc.skel
  cp etc/lipsyncd ${HOME}/.lipsyncd/lipsyncdrc
  # begin nasty long sed replaces all the configs with stuff
  sed -i.orig -e 's|LSLOCDIR|'${lipsync_dir_local}'|g' -e 's|LSUSER|'${username}'|g' -e 's|LSPORT|'${port}'|g' -e 's|LSREMSERV|'${remote_server}'|g' -e 's|LSREMDIR|'${lipsync_dir_remote}'|g' -e 's|LSSSHCONFIG|${lipsync_ssh_config}|g' -e 's|LSSSHKEY|${lipsync_ssh_key}|g' ${HOME}/.lipsyncd/lipsyncdrc
  echo " DONE"
}

# remove ssh config
lipsync-clean-ssh(){
  if [[ -f ${lipsync_ssh_config} ]]
  then
    sed -i.lipsync.restore -e '/#START LIPSYNC/,/#END LIPSYNC/d' ${lipsync_ssh_config}
  fi
}

# add ssh config
lipsync-ssh-config(){
  if [[ ! -f ${lipsync_ssh_config} ]]
  then
    echo -n "* creating ssh config"
    echo "" >> ${lipsync_ssh_config}
  fi
sed -i.lipbak -e "1i\
#START LIPSYNC\n\
Host lipsync\n\
  HostName ${remote_server}\n\
  IdentityFile ${lipsync_ssh_key}\n\
  port ${port}\n\
#END LIPSYNC\n\
" ${lipsync_ssh_config}
  chmod 0600 ${lipsync_ssh_config}
  if grep lipsync ${lipsync_ssh_config} &> /dev/null
  then
    echo " DONE"
  else
    echo; echo "  ERROR: there was an error creating the ssh config"; exit 1
  fi
}

# generate ssh key
lipsync-keygen(){
  echo -n "* No existing key found, creating SSH key for ${username}..."
  ssh-keygen -q -N '' -f $(echo ${lipsync_ssh_key})
  if [[ $? -eq 0 ]]; then
    chown -R ${username}:${username} /home/${username}/.ssh #TODO figure out why?
    echo " DONE"
  else
    echo; echo "  ERROR: there was an error generating the ssh key"; exit 1
  fi
}    

lipsync-transfer-key(){
  echo "* Transferring ssh key for ${username} to ${remote_server} on port ${port}"
  echo -n "  (login as ${username} now)... " 
  ssh-copy-id -i ${lipsync_ssh_key} ${username}@${remote_server} > /dev/null
  if [[ $? -eq 0 ]]; then
    echo " DONE"
  else
    echo; echo "  ERROR: there was an error transferring the ssh key"; exit 1
  fi

  echo "* Setting permissions on the ssh key for ${username} on ${remote_server} on port ${port}..."; 
  echo -n "  (login as ${username} now)... " 
  SSH_AUTH_SOCK=0 ssh ${remote_server} -p ${port} 'chmod 700 .ssh'
  if [[ $? -eq 0 ]]; then
    echo " DONE"
  else
    echo; echo "  ERROR: there was an error setting permissions on the ssh key for ${username} on ${remote_server} on port ${port}..."; exit 1
  fi
}

# check to see if the key needs to be generated
lipsync-checkkey(){
  # TODO generate new key for lipsync
  if [[ -f ${lipsync_ssh_key} ]]
  then
    echo " lipsync ssh key already exists, not creating new one"
    if ssh -i ${lipsync_ssh_key} -p ${port} -o "KbdInteractiveAuthentication=no" -o "PasswordAuthentication=no" ${username}@${remote_server} echo "hello" > /dev/null
    then
      echo "ssh key seems to be properly set up, skipping key generation and transfer steps"
      return 0
    else
      lipsync-keygen
    fi
  else
    lipsync-keygen
  fi
}


# update profile scripts
lipsync-update-profile(){
  #TODO add steps which update bash, ksh, zsh profile scripts
  echo -n "Updating profile scripts to enable lipsync..."
  sleep 1
  echo " DONE" 
}

### main loop order
# prereqs
lipsync-prereqs

# ask questions
lipsync-questions

# check key
lipsync-checkkey

# create ssh config
lipsync-ssh-config

# transfer key
lipsync-transfer-key

# lipsync-prereq-rsync
lipsync-prereq-rsync

# update profile script
lipsync-update-profile
