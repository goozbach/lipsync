#!/bin/bash
# ask the questions
lipsync-questions(){
	echo -n "> SERVER: IP or domainname: "
	read remote_server

	echo -n "> SERVER: SSH port: "
	read port
	
	echo -n "> SERVER/CLIENT: username (must exist on both): "
    	read username
    
	echo -n "> CLIENT: directory to be synced: "
	read lipsync_dir_local

	echo -n "> CLIENT: ssh config file[~/.ssh/config]: "
	read lipsync_ssh_config
  if [[ -z ${lipsync_ssh_config} ]]
  then
    lipsync_ssh_config="~/.ssh/config"
  fi

	echo -n "> CLIENT: ssh key file[~/.ssh/id_dsa_lipsync]: "
	read lipsync_ssh_key
  if [[ -z ${lipsync_ssh_key} ]]
  then
    lipsync_ssh_key="~/.ssh/id_dsa_lipsync"
  fi

	echo -n "> SERVER: remote directory to be synced: "
	read lipsync_dir_remote
}

# check rsync pre-req local and remote
lipsync-prereq-rsync(){
  type -P rsync &>/dev/null || { echo; echo "	ERROR: lipsync requires rsync but it's not installed" >&2; exit 1; }
  RSYNC_VERS=$(rsync --version | grep '^rsync *version' | tr -s ' ' | cut -f 3 -d ' ')
  RSYNC_MAJOR=${RSYNC_VERS%%.*}
  RSYNC_VERS_REMOTE=$(ssh -p ${port} ${username}@${remote_server} rsync --version 2>/dev/null | grep '^rsync *version' | tr -s ' ' | cut -f 3 -d ' ')
  RSYNC_MAJOR_REMOTE=${RSYNC_VERS_REMOTE%%.*}
  if [[ ${RSYNC_MAJOR} -lt 3 ]];
  then
    echo; echo " ERROR: lipsync requires rsync > 3.0.0 but it's version ${RSYNC_VERS}" >&2;
    exit 1
  else
    return
  fi
  if [[ ${RSYNC_MAJOR_REMOTE} -lt 3 ]];
  then
    echo; echo " ERROR: lipsync requires the remote server rsync to be > 3.0.0 but it's version ${RSYNC_VERS_REMOTE}" >&2;
    exit 1
  else
    return
  fi
}

lipsync-prereqs(){
  ########################################
  # Check for required software
  ########################################
  echo -n "* Checking for required software..."
  type -P ssh &>/dev/null || { echo; echo "	ERROR: lipsync requires ssh-client but it's not installed" >&2; exit 1; }
  type -P ssh-copy-id &>/dev/null || { echo; echo "	ERROR: lipsync requires ssh-copy-id but it's not installed" >&2; exit 1; }
  lipsync-prereq-rsync
  type -P lsyncd &>/dev/null || { echo; echo "	ERROR: lipsync requires lsyncd but it's not installed" >&2; exit 1; }
  echo " OK"
}


lipsync-build-conf(){
	echo -n "* Creating lipsyncd config..."
  # TODO copy from system-wide /etc/lipsyncdrc.skel
  cp etc/lipsyncd ${HOME}/.lipsyncd/lipsyncdrc
  # begin nasty long sed replaces all the configs with stuff
	sed -i.orig -e 's|LSLOCDIR|'$lipsync_dir_local/'|g' -e 's|LSUSER|'$username'|g' -e 's|LSPORT|'$port'|g' -e 's|LSREMSERV|'$remote_server'|g' -e 's|LSREMDIR|'$lipsync_dir_remote'|g' ${HOME}/.lipsyncd/lipsyncdrc
  echo "LIPSYNC_SSH_CONFIG=\"$lipsync_ssh_config\"" >> ${HOME}/.lipsyncd/lipsyncdrc
  echo "LIPSYNC_SSH_KEY=\"lipsync_ssh_key\"" >> ${HOME}/.lipsyncd/lipsyncdrc
	echo "done"
}

# generate ssh key
lipsync-keygen(){
  # TODO generate new key for lipsync
  if [[ -f ${HOME}/.ssh/id_dsa-lipsync ]]
  then
    echo " lipsync ssh key already exists, not creating new one"
  else
    #TODO create lipsync key
    echo "creating lipsync key"
  fi
}

# remove ssh config
lipsync-clean-ssh(){
  sed -i.lipsync.restore -e '/#START LIPSYNC/,/#END LIPSYNC/d' ${lipsync_ssh_config}
}

# add ssh config
lipsync-ssh-config(){
  # TODO check to see if there and remove
  sed -i.lipbak -e "1i\
#START LIPSYNC\n\
Host lipsync\n\
  HostName ${remote_server}\n\
  IdentiyFile ${identiyfile}\n\
  port ${port}\n\
#END LIPSYNC\
" ${lipsync_ssh_config}
}

# update profile scripts
lipsync-update-profile(){
  #TODO add steps which update bash, ksh, zsh profile scripts
  sleep 1
}

